#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <cmath>
#include <map>
#include <list>

using namespace std;
#define target_up   500
// #define target_down 9000
#define MOVE_UP 1
#define MOVE_DOWN -1
#define RADIUS 510

float     calc_distance(int x, int y, int x_fish, int y_fish)
{
    //X1 = x_dst        X2= x_m + v_x_m
    //Y1 = y_dst        Y2= y_m + v_y_m

    return (sqrt(pow(((x - x_fish)), 2) + pow(((y - y_fish)), 2)));

}


vector<int> reported_fish;

class Entity
{
    public :
        int     id;
        int     color;
        int     type;
        int     x;
        int     y;
        int     vx;
        int     vy;
        int     scanned;
        string  pos;
        map<int, string> drone;
        map<int, string> dist;
        int     visible;
        Entity(int creature_id,int color,int type, int x_fish , int y_fish, int vx, int vy)
        {
            id = creature_id;
            this->color = color;
            this->type = type;
            x = x_fish;
            y = y_fish;
            scanned = 0;
            visible = 0;
            this->vx = vx;
            this->vy = vy;
        }
};      

class   Monster
{
    public :
        int     id;
        int     x;
        int     y;
        int     vx;
        int     vy;
        Monster(int id,  int x, int y, int vx, int vy)
        {
            this->id = id;
            this->x =  x;
            this->y  = y;
            this->vx  = vx;
            this->vy = vy;
        };

};

vector<Entity> v;


class   Drone
{
    public :
        int   id;
        int     x;
        int     y;
        int     vx;
        int     vy;
        int     init_x;
        int     init_y;
        int emergency;
        int battery;
        int move;
        int target[2];
        Drone(){};
        Drone(int id , int x , int y , int vx, int vy, int emergency , int battery)
        {
            this->id = id;
            this->x = x;
            this->y = y;
            this->emergency = emergency;
            this->battery = battery;
            this->move = MOVE_DOWN;
        };
        float magnitude(int x, int y) 
        {
            return (sqrt(pow(x, 2) + pow(y, 2)));
        }
        //normalize for target
        void normalize(float magnitude)
        {
            vx /= magnitude;
            vy /= magnitude;
        }
        void    Scale(int scableBy)
        {
            vx *= scableBy;
            vy *= scableBy;
            // vx += x;
            // vy += y;
        }
        // it = find(reported_fish.begin(), reported_fish.end() , drone.id );
        // if (it != reported_fish.end() && !drone.y)
        //     reported_fish.erase(it);
        // if (reported_fish.size() && it != reported_fish.end())
        // {
        //     drone.vy -= 600;
        // }
        // else
        // {
        //     if (v[i].drone[drone.id] == "TL" || v[i].drone[drone.id] == "BL")
        //     {
        //         drone.vx -= 600; 
        //     }
        //     else if (v[i].drone[drone.id] == "TR" || v[i].drone[drone.id] == "BR")
        //     {
        //         drone.vx += 600; 
        //     }
        //     if (v[i].drone[drone.id][0] == 'B')
        //         drone.vy += 600;
        //     else
        //         drone.vy -= 600;

        //     if (drone.vx < 0 || drone.vx > 9999)
        //     {
        //         drone.vx = 600;
        //     }
        //     if (drone.vy < 0 || drone.vy > 9999)
        //     {
        //         drone.vy = 600;
        //     }
        // }

        void    setPoint(int i)
        {
            vector<int>::iterator it;

            it = find(reported_fish.begin(), reported_fish.end() , id );
            if (it != reported_fish.end() && !y)
                reported_fish.erase(it);
            if (reported_fish.size() && it != reported_fish.end())
            {
                vy -= 600;
            }
            else
            {
                if (v[i].drone[id] == "TL" || v[i].drone[id] == "BL")
                {
                    vx -= 600; 
                }
                else if (v[i].drone[id] == "TR" || v[i].drone[id] == "BR")
                {
                    vx += 600; 
                }
                if (v[i].drone[id][0] == 'B')
                    vy += 600;
                else
                    vy -= 600;

                if (vx < 0 || vx > 9999)
                {
                    vx = 600;
                }
                if (vy < 0 || vy > 9999)
                {
                    vy = 600;
                }
            }          
        }
};

bool     compare(const Entity& v1, const Entity& v2)
{
    return (v1.type > v2.type);
}

int     j = -1;



int     scanned;
int     state = 0;

// void    steering_from_monster(int x, int y, )
// {

// }

//move to report if a drone of my enemy reaches last 

list<int> radar_list;
vector<int> top;
vector<int>::iterator it;

int     arr[2] = {0, 0};

// i have to turn off light if im close to monster
int     lamba[2] = {0, 0};




int     check_territory(int x, int y,  vector<Monster>& visible_monster)
{
    int     i;
    int     dist_from_monster;
    int     dist_from_monster_next_point;

    i = 0;
    while (i < visible_monster.size())
    {
        dist_from_monster = calc_distance(x, y, visible_monster[i].x , visible_monster[i].y);
        dist_from_monster_next_point = calc_distance(x, y, visible_monster[i].x + visible_monster[i].vx, visible_monster[i].y + visible_monster[i].vy);
        if (dist_from_monster <= RADIUS || dist_from_monster_next_point <= RADIUS)
            return (1);
        i++;
    }
    return (0);
}

int     check_boundries(int x, int y)
{
    return (x < 0 || x > 9999 || y < 0 || y > 9999);
}

void    calculate_next_point(Drone& drone)
{
    int     deltaX, deltaY;

    deltaX = drone.target[0] - drone.x;
    deltaY = drone.target[1] - drone.y;

    // cerr << "player coordinates : " << "x : " << drone.x << " " << drone.y << endl;

    // Calculate the distance from the current point to the target point
    double distance = sqrt(pow(deltaX, 2) + pow(deltaY, 2));

    // Compute the unit direction vector
    double unitX = deltaX / distance;
    double unitY = deltaY / distance;

    // Calculate the next point using the step size (scaled unit direction vector)
    

    drone.vx = round(drone.x + unitX * 600);
    drone.vy = round(drone.y + unitY * 600);

    // cerr << "player id : " << drone.id << endl;
    // cerr << "next point : x : " <<  drone.vx << ", y : " << drone.vy << endl;
    
}

int     light = 0;

void    set_coords(int i, Drone& drone,  vector<Monster>& visible_monster)
{
    int     dist_from_monster_next_point = 0;
    int     dist_from_monster = 0;
    int     angle = 0;
    map<int, pair<int, int> > next_points;
    int     step = 0;
    int     target_down[2];
    if (v[i].type == 2)
    {
        step = 3;
    }
    else if (v[i].type == 1)
    {
        step = 2;
    }
    else
        step = 1;

    if (drone.init_x < 5000)
        target_down[0] = 2500;
    else
        target_down[0] = 7500;
    target_down[1] = (2500 * step) + 1250;

    





    drone.target[0] = drone.x;
    drone.target[1] = target_down[1];
    if (drone.y >= target_down[1]) 
    { 
        drone.move = MOVE_UP;
    }
    else if (drone.y <= target_up)
    {
        drone.move = MOVE_DOWN;
    }
    if (drone.move == MOVE_UP)
    {
        drone.target[0] = drone.x;
        drone.target[1] = target_up;
    }
    else
    {
        drone.target[0] = target_down[0];
        drone.target[1] = target_down[1];
    }

    cerr << "player id : " << drone.id << " target : " << drone.target[0] << " " << drone.target[1] << endl;

    cerr << "player coordinates : " << "x : " << drone.x << " " << drone.y << endl;

    //calculate next point 
    calculate_next_point(drone);
    if (drone.vy >= target_down[1])
        light = 1;
    cerr << "next point : x : " <<  drone.vx << ", y : " << drone.vy << endl;

    if (visible_monster.size())
    {
        int     x;
        int     y;
        double x_new;
        double y_new;
        double _cos;
        double _sin;
        int dist;

        // cerr << "target : " << drone.target << endl;
        
        x = drone.vx;
        y = drone.vy;

        
        while (angle <= 360)
        {
            if (check_boundries(x, y) || check_territory(x, y, visible_monster))
            {
                angle += 20;

                x  = drone.vx;
                y  = drone.vy;
                x -= drone.x;
                y -= drone.y; 
                
                _cos = cos(angle * M_PI / 180);
                _sin = -sin(angle * M_PI / 180);

                x_new = x * _cos - y * _sin; 
                y_new = x * _sin + y * _cos; 

                x = x_new + drone.x;
                y = y_new + drone.y;
                continue ;
            }
            else
            {
                // if (drone.id == 0)
                //     cerr << "Valid" << endl;

                if (drone.move == MOVE_DOWN)
                {
                    drone.vx = target_down[0];
                }
                if (drone.id == 2)
                    cerr << "Valid point" << endl;
                dist = calc_distance(drone.target[0], drone.target[1], x, y);
                next_points[dist] = make_pair(x, y);
            }
            angle += 20;
        }
        // cerr << "player coordinates : " << "x : " << drone.x << " " << drone.y << endl;
       
        drone.x = next_points.begin()->second.first;
        drone.y = next_points.begin()->second.second;

        cerr << "next coordinates : " << "x : " << drone.x << " " << drone.y << endl;
    }
    else
    {
        // cerr << "player coordinates : " << "x : " << drone.x << " " << drone.y << endl;


        // if (drone.move == MOVE_DOWN)
        // {
        //     drone.x = target_down[0];
        //     drone.y = target_down[1];
        // }
        // else
        // {
            drone.x =  drone.target[0];
            drone.y =  drone.target[1];
        // }


        // cerr << "next coordinates : " << "x : " << drone.x << " " << drone.y << endl;
    }















    // if (find(radar_list.begin(), radar_list.end(), v[i].id) == radar_list.end())
    // {
    //     v.erase(v.begin());
    // }
    // tmp_x = coords[id].first;
    // tmp_y = coords[id].second;
    // if (top.size())
    // {
    //     it = find(top.begin(), top.end(), id);
    //     if (it != top.end())
    //     {
    //         if (coords[id].second)
    //         {
    //             tmp_y -= 600;
    //             if (tmp_y < 0)
    //                 tmp_y = 0;
    //             make_decision( i,  id ,tmp_x, tmp_y, coords);
    //             cerr << "wahya" << endl;
    //             return ;
    //         }
    //         top.erase(it);
    //     }
    //     // cerr << "id : " << id << endl;
    // }
    // if (tmp_y < 8900)
    // {
    //     // cerr << "plus y " << endl;
    //     // cerr << "id : " << id << endl;
    //     tmp_y += 600;
    //     // cerr << "y : " << tmp_y << endl;
    //     if (tmp_y > 8900)
    //         tmp_y = 8900;
    // }
    // else
    // {
    //     if (find(top.begin(), top.end(), id) == top.end())
    //         top.push_back(id);
    //     tmp_y -= coords[id].second - 600;
    //     return ;
    // }
    // if (tmp_y >= 8900)
    // {
    //     if (find(top.begin(), top.end(), id) == top.end())
    //         top.push_back(id);
    //     tmp_y -= 600;
    //     // return ;
    // }
    
    // make_decision( i,  id ,tmp_x, tmp_y, coords);

    
}

int main()
{
    int creature_count;
    cin >> creature_count; cin.ignore();
    vector<int> scan_id;
    vector<Monster> monsters;

    int     j;

    for (int i = 0; i < creature_count; i++) {
        int creature_id;
        int color;
        int type;
    
        cin >> creature_id >> color >> type; cin.ignore();
        if (type == -1)
            monsters.push_back(Monster(creature_id, 0, 0, 0, 0));
        else
            v.push_back(Entity(creature_id , color , type, 0 , 0, 0, 0));
    }
    int state = 0;
    int     ids[2];
    // game loop
    vector<int> scanned;
    vector<Drone> drone(2);

    int     turn = -1; 
    while (1) {
        turn++; 
        vector<Monster> visible_monsters;

        map<int, pair<int, int> > coords;

        int my_score;
        cin >> my_score; cin.ignore();
        int foe_score;
        cin >> foe_score; cin.ignore();
        int my_scan_count;
        cin >> my_scan_count; cin.ignore();

        for (int i = 0; i < my_scan_count; i++) {
            int creature_id;
            cin >> creature_id; cin.ignore();
        }
        
        
        int foe_scan_count;
        cin >> foe_scan_count; cin.ignore();
        for (int i = 0; i < foe_scan_count; i++) {
            int creature_id;
            cin >> creature_id; cin.ignore();
        }
        int my_drone_count;
        cin >> my_drone_count; cin.ignore();
        int drone_id;
        int drone_x;
        int drone_y;
        int emergency;
        int battery;
        

        for (int i = 0; i < my_drone_count; i++) {
            cin >> drone_id >> drone_x >> drone_y >> emergency >> battery; cin.ignore();
            ids[i] = drone_id;
            drone[i].id = drone_id;
            drone[i].x = drone_x;
            drone[i].y = drone_y;
            drone[i].vx = drone_x;
            drone[i].vy = drone_y;
            drone[i].emergency = emergency;
            drone[i].battery = battery;
            // cerr << "id : " << ids[i] << endl;
            coords[drone_id] = make_pair(drone_x, drone_y);
        }
        if (!turn)
        {
            drone[0].init_x = drone[0].x; 
            drone[0].init_y = drone[0].y;
            drone[1].init_x = drone[1].x; 
            drone[1].init_y = drone[1].y;
        }
        int foe_drone_count;
        cin >> foe_drone_count; cin.ignore();
    

        for (int i = 0; i < foe_drone_count; i++) {
            int drone_id;
            int drone_x;
            int drone_y;
            int emergency;
            int battery;
            cin >> drone_id >> drone_x >> drone_y >> emergency >> battery; cin.ignore();
        }
        int drone_scan_count;
        cin >> drone_scan_count; cin.ignore();
        
        for (int i = 0; i < drone_scan_count; i++) {
            int drone_id;
            int creature_id;
            cin >> drone_id >> creature_id; cin.ignore();
            j = -1;
            while (++j < v.size() && (drone_id == ids[0] || drone_id == ids[1]))
            {
                // if (v[j].type == -1)
                //     cerr << "is a monster" << endl;
                if (v[j].id == creature_id)
                {
                    v[j].scanned = 1;
                    break ; 
                }
            }
            // cerr << "scanned id : " << creature_id << endl;
            // if (drone_id == ids[0] || drone_id == ids[1])
            // {
            //     if (find(scanned.begin(), scanned.end(), creature_id) == scanned.end())
            //         scanned.push_back(creature_id);
            // }
        }
        int visible_creature_count;
        cin >> visible_creature_count; cin.ignore();
        
        j = -1;
        while (++j < v.size())
        {
            v[j].x = 0;
            v[j].y = 0;
            v[j].vx = 0;
            v[j].vy = 0;
        }
        for (int i = 0; i < visible_creature_count; i++) {
            int creature_id;
            int creature_x;
            int creature_y;
            int creature_vx;
            int creature_vy;
            cin >> creature_id >> creature_x >> creature_y >> creature_vx >> creature_vy; cin.ignore();

            j = -1;
            while (++j < monsters.size())
            {
                if (monsters[j].id == creature_id)
                {
                    visible_monsters.push_back(Monster(creature_id, creature_x, creature_y, creature_vx, creature_vy));
                    break ;
                }
            }
            j = -1;
            while (++j < v.size())
            {
                //u have to reset value of monsters not detected by radar
                if (v[j].id == creature_id)
                {
                    v[j].dist[ids[0]] = calc_distance(coords[ids[0]].first, coords[ids[0]].second, creature_x, creature_y);
                    v[j].dist[ids[1]] = calc_distance(coords[ids[1]].first, coords[ids[1]].second, creature_x, creature_y);
                    v[j].x = creature_x;
                    v[j].y = creature_y;
                    v[j].vx = creature_vx;
                    v[j].vy = creature_vy;
                    break ;
                }
            }
            
        }
        int radar_blip_count;
        cin >> radar_blip_count; cin.ignore();
        radar_list.clear();
        //ki3tik creature_id li ba9in 
        for (int i = 0; i < radar_blip_count; i++) {
            int drone_id;
            int creature_id;
            if (i < radar_blip_count / 2)
                radar_list.push_back(creature_id);
            // cerr << "radar id : " << creature_id << endl;
            string radar;
            cin >> drone_id >> creature_id >> radar; cin.ignore();
            int j = -1;
            while (++j < creature_count)
            {
                if (v[j].id == creature_id)
                { 
                    //check type of monster
                    v[j].drone[drone_id] = radar;
                    
                    // cerr << "fish id : " << creature_id << endl;
                    // cerr << "pos : " << radar << endl;
                    break ;
                }
            }
            // cerr << "radar : " << radar << endl;
            // cerr << "drone id : " << drone_id << endl;

        }
    
        j = -1;
        while (++j < v.size())
        {
            if (v[j].scanned)
            {
                v.erase(v.begin() + j);
            }
        }
        sort(v.begin(), v.end(), compare);
        // j = -1;
        // while (++j < creature_count)
        // {
        //    cerr << "type : " << v[j].type << endl;
        // }
        int     tmp_x;
        int     tmp_y;
    
        // aya wahda nscanniha nb9a tab3ha 7ta n5rjha mn borders
        // if (scanned.size() == 11)
        //     cerr << "size : " << scanned.back() << endl;
       
        //  lamba[0] = 0;
        //  lamba[1] = 0;
        for (int i = 0; i < my_drone_count; i++) {

            // Write an action using cout. DON'T FORGET THE "<< endl"
            // // To debug: cerr << "Debug messages..." << endl;

            if (drone[i].emergency)
            {
                cout << "WAIT 0" << endl;
            }
            else
            {
                set_coords(i, drone[i],  visible_monsters);
                if (v.empty())
                {
                    cerr << "move to report" << endl;
                    cout << "MOVE " << drone[i].x << " " << 0 << " 0" << endl;
                    //must be moved
                }
                else
                {
                    cout << "MOVE " << drone[i].x << " " << drone[i].y << " " << light << endl; // MOVE <x> <y> <light (1|0)> | WAIT <light (1|0)>
                    
                    // if (drone[i].y >= 1500 && battery >= 5 && turn % 2 == 0)//&& !lamba[i])
                    // {
                    //     cout << "MOVE " << drone[i].x << " " << drone[i].y << " 0" << endl; // MOVE <x> <y> <light (1|0)> | WAIT <light (1|0)>
                    //     // light[i] = 1;
                    // }
                    // else
                    // {
                    //     // light[i] = 0;
                    //     cout << "MOVE " << drone[i].x << " " << drone[i].y << " 0" << endl; // MOVE <x> <y> <light (1|0)> | WAIT <light (1|0)>
                    // }
                }
            }

        }
    }
}
