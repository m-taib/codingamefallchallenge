#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <cmath>
#include <map>
#include <list>

using namespace std;
#define target_up   500
// #define target_down 9000
#define MOVE_UP 1
#define MOVE_DOWN -1
// #define RADIUS 650
#define RADIUS 540

float     calc_distance(int x, int y, int x_fish, int y_fish)
{
    //X1 = x_dst        X2= x_m + v_x_m
    //Y1 = y_dst        Y2= y_m + v_y_m

    return (sqrt(pow(((x - x_fish)), 2) + pow(((y - y_fish)), 2)));

}


vector<int> reported_fish;

class Entity
{
    public :
        int     id;
        int     color;
        int     type;
        int     x;
        int     y;
        int     vx;
        int     vy;
        int     scanned;
        int     scanned_by;
        int     scanned_by_enemy;
        string  pos;
        map<int, string> drone;
        map<int, string> dist;
        int     visible;
        
        Entity(int creature_id,int color,int type, int x_fish , int y_fish, int vx, int vy)
        {
            id = creature_id;
            this->color = color;
            this->type = type;
            x = x_fish;
            y = y_fish;
            scanned = 0;
            visible = 0;
            scanned_by = -1;
            this->vx = vx;
            this->vy = vy;
            scanned_by_enemy = -1;
        }
};      

class   Monster
{
    public :
        int     id;
        int     x;
        int     y;
        int     vx;
        int     vy;
        Monster(int id,  int x, int y, int vx, int vy)
        {
            this->id = id;
            this->x =  x;
            this->y  = y;
            this->vx  = vx;
            this->vy = vy;
        };

};

vector<Entity> v;


class   Drone
{
    public :
        int   id;
        int     x;
        int     y;
        int     vx;
        int     vy;
        int     init_x;
        int     init_y;
        int     emergency;
        int     battery;
        int     move;
        int     target[2];
        int     next_x;
        int     next_y;
        int     goes_up;
        int     score;
        int     previous_x;
        int     previous_y;
        int     lamba;
        Drone(){};
        Drone(int id , int x , int y , int vx, int vy, int emergency , int battery)
        {
            this->id = id;
            this->x = x;
            this->y = y;
            this->emergency = emergency;
            this->battery = battery;
            this->move = MOVE_DOWN;
            lamba = 0;
            goes_up = 0;
            score = 0;
        };
        float magnitude(int x, int y) 
        {
            return (sqrt(pow(x, 2) + pow(y, 2)));
        }
        //normalize for target
        void normalize(float magnitude)
        {
            vx /= magnitude;
            vy /= magnitude;
        }
        void    Scale(int scableBy)
        {
            vx *= scableBy;
            vy *= scableBy;
            // vx += x;
            // vy += y;
        }
};

bool     compare(const Entity& v1, const Entity& v2)
{
    return (v1.type > v2.type);
}

int     j = -1;



int     scanned;
int     state = 0;

// void    steering_from_monster(int x, int y, )
// {

// }

//move to report if a drone of my enemy reaches last 

list<int> radar_list;
vector<int> top;
vector<int>::iterator it;

int     arr[2] = {0, 0};

// i have to turn off light if im close to monster


int     check_territory(Drone& drone, int x, int y,  vector<Monster>& visible_monster,  map<int, pair<int, int> >& next_points)
{
    int     i;
    float     dist_from_monster;
    int     dist_from_monster_next_point;
    int     j;
 
    pair< vector<pair<int, int> >, vector<pair<int, int> > > coords;
    map<int, pair<int, int> > saved_points;
    map<int, pair<int, int> > tmp;
    int     x_drone;
    int     y_drone;
    int     x_monster;
    int     y_monster;
    int     dist;
    float   xi;
    float   yi;
    float   dx;
    float   dy;

    i = 0;
    int step = 60;

    while (i < visible_monster.size())
    {
        int     j = 1;
        while (j <= step)
        {
            xi = visible_monster[i].x + j * ((int)visible_monster[i].vx / step);
            yi = visible_monster[i].y + j * ((int)visible_monster[i].vy / step);
            dx = drone.x + j * ((x - drone.x) / step);
            dy = drone.y + j * ((y  - drone.y) / step);
            if (calc_distance(xi, yi, dx, dy) <= 550)
            {
                return (1);
            }
            j++;
        }
        dist = calc_distance(dx, dy, drone.target[0] , drone.target[1]);
        saved_points[dist] = make_pair(dx, dy);
        i++;
    }
    next_points.insert(saved_points.begin(), saved_points.end());

}

int     check_boundries(int x, int y)
{
    return (x < 0 || x > 9999 || y < 0 || y > 9999);
}

void    calculate_next_point(Drone& drone)
{
    int     deltaX, deltaY;

    deltaX = drone.target[0] - drone.x;
    deltaY = drone.target[1] - drone.y;

    // cerr << "player coordinates : " << "x : " << drone.x << " " << drone.y << endl;

    // Calculate the distance from the current point to the target point
    double distance = sqrt(pow(deltaX, 2) + pow(deltaY, 2));

    // Compute the unit direction vector
    double unitX = deltaX / distance;
    double unitY = deltaY / distance;

    // Calculate the next point using the step size (scaled unit direction vector)
    

    drone.vx = round(drone.x + unitX * 600);
    drone.vy = round(drone.y + unitY * 600);

    // cerr << "player id : " << drone.id << endl;
    // cerr << "next point : x : " <<  drone.vx << ", y : " << drone.vy << endl;
    
}

int     light[2] = {0, 0};

int     id[2] = {0, 0};


void    set_coords(int i, Drone& drone, vector<Drone>& foe_drone, int& op_id, map<int, vector<Monster> >& visible_monsters)
{
    int     dist_from_monster_next_point = 0;
    int     dist_from_monster = 0;
    int     angle = 0;
    map<int, pair<int, int> > next_points;
    int     step = 0;
    int     target_down[2];
    int     state = 0;
    
   
   if (v.size())
   {
        if (v[0].type == 2)
            step = 3;
        else if (v[0].type == 1)
        
            step = 2;
        else
            step = 1;

        if (drone.init_x < 5000)
            target_down[0] = 2500;
        else
            target_down[0] = 7500;
        target_down[1] = (2500 * step) + 1250;

        drone.target[0] = drone.init_x;
        drone.target[1] = target_down[1];
   }
   else
        drone.move = MOVE_UP;

    // cerr << "step : " << step << endl;
    

    if (drone.goes_up && drone.y <  foe_drone[op_id].y) //drone.score >  foe_drone[op_id].y // && drone.y >= 7500) || drone.target[1] == target_up )
    {
        cerr << "drone : " << drone.id << " must goes up " << endl;
        drone.move = MOVE_UP;
        state = 1;
        // drone.target[0] = drone.x;
        // drone.target[1] = target_up;
    }
    
    if (drone.y >= target_down[1]) 
    { 
        drone.move = MOVE_UP;
    }
    else if (drone.y <= target_up)
    {
        drone.move = MOVE_DOWN;
    }

    if (drone.move == MOVE_UP)
    {
        drone.target[0] = drone.x;
        drone.target[1] = target_up;
    }
    else
    {
        drone.target[0] = target_down[0];
        drone.target[1] = target_down[1];
    }

    if (drone.y >= 6250 && !state)
    {
        int     s = 0;
        int     c = 0;

        if (drone.init_x > 5000)
        {
            while (s < v.size()  && v[s].type == 2)
            {
                if (!v[j].scanned_by && v[s].drone[drone.id] == "BR")
                {
                    drone.target[0] = 9999;
                    drone.target[1] = 9999;
                    c = 0;
                    break ;
                }
                else if (!v[j].scanned_by && v[s].drone[drone.id] == "BL")
                    c = s;
                s++;
            }
            if (c)
            {
                drone.target[0] = 5000;
                drone.target[1] = 9999;
            }
        }
        else
        {
            while (s < v.size() && v[s].type == 2)
            {
                if (!v[j].scanned_by && v[s].drone[drone.id] == "BL")
                {
                    drone.target[0] = 0;
                    drone.target[1] = 9999;
                    c = 0;
                    break ;
                }
                else if (!v[j].scanned_by && v[s].drone[drone.id] == "BR")
                    c = s;
                s++;
            }
            if (c)
            {
                drone.target[0] = 5000;
                drone.target[1] = 9999;
            }
        }

    }

    cerr << "drone id : " << drone.id << endl;
    cerr << "player coordinates : " << "x : " << drone.x << " " << drone.y << endl;

    

    
   
    // follow fishes

    int     s = -1;
    drone.lamba = 0;
    while (++s < v.size() && drone.y <= 5000)// && drone.move == MOVE_DOWN)
    {
        if (v[s].x && v[s].scanned && v[s].scanned_by == drone.id && v[s].type == 0 && !v[s].scanned_by_enemy) //&& not scanned by enemy 
        {   
            if ((v[s].x <= drone.x && drone.init_x < 5000) || (v[s].x >= drone.x &&  drone.init_x > 5000))
            {
                drone.target[0] = v[s].x;
                drone.target[1] = v[s].y;
                drone.lamba = 1;
                break ;
            }
            // else
            // {
            //     if (v[s].drone[drone.id] == "BR")
            //     {
            //         drone.target[0] = 9999;
            //         drone.target[1] = 9999;
            //         break ;
            //     }
            // }
        }       
    }

    cerr << "drone goes up : " << drone.goes_up << endl;
    cerr << "state : " << state << endl;
    cerr << "etat : " << ( foe_drone[op_id].previous_y >=  foe_drone[op_id].y) << endl;
    cerr << "opponent coordinates : " <<  foe_drone[op_id].x << " " <<  foe_drone[op_id].y << endl;
    // if (drone.y >= 6500)
    // {
        if (drone.goes_up && !state &&  foe_drone[op_id].y <= 7500)// foe_drone[op_id].previous_y <=  foe_drone[op_id].y)
        {
            s = -1;
            cerr << "actual coordinates => x : " <<  foe_drone[op_id].x << " " <<  foe_drone[op_id].y << endl;
            cerr << "old    coordinates => x : " <<  foe_drone[op_id].x << " " <<  foe_drone[op_id].y << endl;
            while (++s < v.size())
            {
                // if (v[s].id == 8 && v[s].x)
                // {
                //     cerr << "must move to it " << endl;
                // }
                if (v[s].x && v[s].scanned && v[s].scanned_by == drone.id && v[s].type == 2 && v[s].scanned_by_enemy == -1)
                {
                    if ((v[s].x <= drone.x && drone.init_x < 5000) || (v[s].x >= drone.x &&  drone.init_x > 5000))
                    {
                        drone.target[0] = v[s].x;
                        drone.target[1] = v[s].y;
                        cerr << "fish coordinates : " << v[s].x << " " << v[s].y << endl;
                    }
                    else
                    {
                        drone.target[0] = v[s].x;
                        drone.target[1] = v[s].y;
                    }
                    break ;

                }
                // else
                // {
                //     if (!v[j].scanned_by && v[s].drone[drone.id] == "BL")
                //     {
                //         drone.target[0] = 0;
                //         drone.target[1] = 9999;
                //         break ;

                //     }
                //     else  
                //     {
                //         drone.target[0] = 9999;
                //         drone.target[1] = 9999;
                //         break ;

                //     } 
                // }
            }
        }
    // }

    int     sc = 0;
    while (sc < v.size())
    {
        if (!v[sc].scanned)
            break ;    
        sc++;
    }
    if (sc == v.size())
    {
        cerr << "all fishes are scanned" << endl;
        drone.target[0] = drone.x;
        drone.target[1] = target_up;
    }
    //calculate next point 
    calculate_next_point(drone);
    
    
    // if (drone.vy >= target_down[1])
    //     light = 1;

    cerr << "next point : x : " <<  drone.vx << ", y : " << drone.vy << endl;
    cerr <<  " target : " << drone.target[0] << " " << drone.target[1] << endl;

    drone.next_x = drone.vx;
    drone.next_y = drone.vy;
    
    if (visible_monsters.size() && visible_monsters[drone.id].size())
    {
        if (drone.id == 0)
        {
            cerr << "===============" << endl;
            int     s = 0;
            while (s < visible_monsters[drone.id].size())
            {
                cerr << "monster id : " << visible_monsters[drone.id][s].id << endl;
                s++;
            }

            cerr << "===============" << endl;
        }

        int     x;
        int     y;
        double x_new;
        double y_new;
        double _cos;
        double _sin;
        int dist;
    
        int     next_x;
        int     next_y;

        next_x = drone.vx;
        next_y = drone.vy;

        // x = next_x;
        // y = next_y;
        
        while (angle <= 360)
        {
            x  = next_x;
            y  = next_y;
            x -= drone.x;
            y -= drone.y; 
            
            _cos = cos(angle * M_PI / 180);
            _sin = -sin(angle * M_PI / 180);

            x_new = x * _cos - y * _sin; 
            y_new = x * _sin + y * _cos; 

            x = x_new + drone.x;
            y = y_new + drone.y;

            if (check_boundries(x, y) || check_territory(drone, x, y, visible_monsters[drone.id],  next_points))
            {
                angle += 1;

                continue ;
            }
            angle += 1;
        }
        // cerr << "player coordinates : " << "x : " << drone.x << " " << drone.y << endl;
       
        if (!next_points.size())
            cerr << "No valid point is found" << endl;
        drone.x = next_points.begin()->second.first;
        drone.y = next_points.begin()->second.second;

        // cerr << "next coordinates : " << "x : " << drone.x << " " << drone.y << endl;
    }
    else
    {
        drone.x =  drone.target[0];
        drone.y =  drone.target[1];
    }
    
}
        

int main()
{
    int creature_count;
    cin >> creature_count; cin.ignore();
    vector<int> scan_id;
    vector<Monster> monsters;

    int     j;

    for (int i = 0; i < creature_count; i++) {
        int creature_id;
        int color;
        int type;
    
        cin >> creature_id >> color >> type; cin.ignore();
        if (type == -1)
            monsters.push_back(Monster(creature_id, 0, 0, 0, 0));
        else
            v.push_back(Entity(creature_id , color , type, 0 , 0, 0, 0));
    }
    // j = -1;
    sort(v.begin(), v.end(), compare);
    // while (++j < v.size())
    // {
    //     cerr << "fish id : " << v[j].id << endl;
    // }
    int state = 0;
    int     ids[2];
    // game loop
    vector<int> scanned;
    vector<Drone> drone(2);
    vector<Drone> foe_drone(2);
    int     turn = -1; 
    int     total = 0;

    while (1) {
        turn++; 
        map<int, vector<Monster>> visible_monsters;
        vector<int> scanned_fish;
       
        map<int, pair<int, int> > coords;

        int my_score;
        cin >> my_score; cin.ignore();
        int foe_score;
        cin >> foe_score; cin.ignore();
        int my_scan_count;
        cin >> my_scan_count; cin.ignore();

        for (int i = 0; i < my_scan_count; i++) {
            int creature_id;
            cin >> creature_id; cin.ignore();
            scanned_fish.push_back(creature_id);
        }
        
        
        int foe_scan_count;
        cin >> foe_scan_count; cin.ignore();
        for (int i = 0; i < foe_scan_count; i++) {
            int creature_id;
            cin >> creature_id; cin.ignore();
        }
        int my_drone_count;
        cin >> my_drone_count; cin.ignore();
        int drone_id;
        int drone_x;
        int drone_y;
        int emergency;
        int battery;
        

        for (int i = 0; i < my_drone_count; i++) {
            cin >> drone_id >> drone_x >> drone_y >> emergency >> battery; cin.ignore();
            ids[i] = drone_id;
            drone[i].id = drone_id;
            drone[i].x = drone_x;
            drone[i].y = drone_y;
            drone[i].vx = drone_x;
            drone[i].vy = drone_y;
            drone[i].emergency = emergency;
            drone[i].battery = battery;
            // cerr << "id : " << ids[i] << endl;
            coords[drone_id] = make_pair(drone_x, drone_y);
        }
        if (!turn)
        {
            drone[0].init_x = drone[0].x; 
            drone[0].init_y = drone[0].y;
            drone[1].init_x = drone[1].x; 
            drone[1].init_y = drone[1].y;
        }
        int foe_drone_count;
        cin >> foe_drone_count; cin.ignore();
    

        for (int i = 0; i < foe_drone_count; i++) {
            int drone_id;
            int drone_x;
            int drone_y;
            int emergency;
            int battery;
            cin >> drone_id >> drone_x >> drone_y >> emergency >> battery; cin.ignore();
            foe_drone[i].id = drone_id;
            foe_drone[i].x = drone_x;
            foe_drone[i].y = drone_y;
            foe_drone[i].vx = drone_x;
            foe_drone[i].vy = drone_y;
            foe_drone[i].emergency = emergency;
            foe_drone[i].battery = battery;
            if (turn % 2 == 0)
            {
             
                foe_drone[i].previous_x = drone_x;
                foe_drone[i].previous_y = drone_x;
            }
        }

        if (!turn)
        {
            foe_drone[0].init_x = foe_drone[0].x; 
            foe_drone[0].init_y = foe_drone[0].y;
            foe_drone[1].init_x = foe_drone[1].x; 
            foe_drone[1].init_y = foe_drone[1].y;
        }

        if (foe_drone[0].y <= 500)
            foe_drone[0].score = 0;
        if (foe_drone[1].y <= 500)
            foe_drone[1].score = 0;

        if (drone[0].y <= 500)
            drone[0].score = 0;
        if (drone[1].y <= 500)
            drone[1].score = 0;

        int drone_scan_count;
        cin >> drone_scan_count; cin.ignore();

        j = -1;
        while (++j < v.size())
        {
            v[j].x = 0;
            v[j].y = 0;
            v[j].vx = 0;
            v[j].vy = 0;
            v[j].scanned_by_enemy = 0;
        }

        int     score;
        for (int i = 0; i < drone_scan_count; i++) {
            int drone_id;
            int creature_id;
            cin >> drone_id >> creature_id; cin.ignore();
        
            j = -1;
            while (++j < v.size() && (drone_id == drone[0].id || drone_id == drone[1].id))
            {
                score = 0;
                if (v[j].id == creature_id)
                {
                    if (v[j].type == 2)
                        score = 3;
                    else if (v[j].type == 1)
                        score = 2;
                    else
                        score = 1;
                    // cerr << "fish : " << v[j].id << " scanned by : " << drone_id << endl;

                    

                    if (drone_id == drone[0].id && v[j].scanned_by != drone[0].id)
                    {
                        drone[0].score += score;
                    }
                    else if (drone_id == drone[1].id && v[j].scanned_by != drone[1].id)
                    {
                        drone[1].score += score;
                    }
                    if (drone_id == drone[0].id)
                        v[j].scanned_by = drone[0].id;
                    else
                        v[j].scanned_by = drone[1].id;
                    // total += score;
                    v[j].scanned = 1;
                    break ; 
                }
            }
            j = -1;
            while (++j < v.size() && (drone_id == foe_drone[0].id || drone_id == foe_drone[1].id))
            {
                score = 0;
                if (v[j].id == creature_id)
                {
                    // cerr << "scanned by : " << drone_id << endl;
                    if (v[j].type == 2)
                        score = 3;
                    else if (v[j].type == 1)
                        score = 2;
                    else
                        score = 1;

                   

                    if (drone_id == foe_drone[0].id && v[j].scanned_by_enemy != foe_drone[0].id)
                    {
                        // cerr << "id of scanned fish : " << v[j].id << endl;
                        foe_drone[0].score += score;
                        v[j].scanned_by_enemy = drone_id;
                    }
                    else if (drone_id == foe_drone[1].id && v[j].scanned_by_enemy != foe_drone[1].id)
                    {
                        foe_drone[1].score += score;
                        v[j].scanned_by_enemy = drone_id;
                    }
                    if (drone_id == drone[0].id)
                        v[j].scanned_by_enemy = foe_drone[0].id;
                    else
                        v[j].scanned_by_enemy = foe_drone[1].id;
                    // v[j].scanned_by_enemy = 1;
                    break ; 
                }
            }
        }
        // cerr << "score of " << drone[0].id << " : " << drone[0].score << endl;
        // cerr << "score of " << drone[1].id << " : " << drone[1].score << endl;
        int visible_creature_count;
        cin >> visible_creature_count; cin.ignore();
        
       
       
        for (int i = 0; i < visible_creature_count; i++) {
            int creature_id;
            int creature_x;
            int creature_y;
            int creature_vx;
            int creature_vy;
            cin >> creature_id >> creature_x >> creature_y >> creature_vx >> creature_vy; cin.ignore();

            j = -1;
            while (++j < monsters.size())
            {
                if (monsters[j].id == creature_id)
                {
                    if (calc_distance(drone[0].x, drone[0].y, creature_x, creature_y) <= 2000)
                    {
                         visible_monsters[drone[0].id].push_back(Monster(creature_id, creature_x, creature_y, creature_vx, creature_vy));
                    }
                    else if (calc_distance(drone[1].x, drone[1].y, creature_x, creature_y) <= 2000)
                    {                        
                        visible_monsters[drone[1].id].push_back(Monster(creature_id, creature_x, creature_y, creature_vx, creature_vy));
                    }
                    break ;
                }
            }
            j = -1;
            while (++j < v.size())
            {
                //u have to reset value of monsters not detected by radar
                if (v[j].id == creature_id)
                {
                    v[j].dist[ids[0]] = calc_distance(coords[ids[0]].first, coords[ids[0]].second, creature_x, creature_y);
                    v[j].dist[ids[1]] = calc_distance(coords[ids[1]].first, coords[ids[1]].second, creature_x, creature_y);
                    v[j].x = creature_x;
                    v[j].y = creature_y;
                    v[j].vx = creature_vx;
                    v[j].vy = creature_vy;
                    break ;
                }
            }
            
        }
       
        int radar_blip_count;
        cin >> radar_blip_count; cin.ignore();
        radar_list.clear();
        
        //ki3tik creature_id li ba9in 
        for (int i = 0; i < radar_blip_count; i++) {
            int drone_id;
            int creature_id;
            if (i < radar_blip_count / 2)
                radar_list.push_back(creature_id);
            // cerr << "radar id : " << creature_id << endl;
            string radar;
            cin >> drone_id >> creature_id >> radar; cin.ignore();
            int j = -1;
            while ( ++j < v.size() && j < creature_count)
            {
                //skip if its a monster
                // if (creature_id == 19)
                //     cerr << "=========Monster detected===========" << endl;
                if (v[j].id == creature_id)
                { 
                    //check type of monster
                    v[j].drone[drone_id] = radar;
                    
                    // cerr << "fish id : " << creature_id << endl;
                    // cerr << "pos : " << radar << endl;
                    break ;
                }
            }
            // cerr << "radar : " << radar << endl;
            // cerr << "drone id : " << drone_id << endl;

        }

        
        j = -1;
        while (++j < v.size())
        {
            if (find(radar_list.begin(), radar_list.end(), v[j].id) == radar_list.end())
            {
                cerr << "########################" << endl;
                cerr << "fish id : " << v[j].id << " is out of boundries" << endl;
                cerr << "########################" << endl;
                v.erase(v.begin() + j);
            }
        }
        j = -1;
     
        int     i;
        i = 0;
        
        
        while (++j < v.size())
        {
            if (v[j].scanned)
            {
                if (find(scanned_fish.begin(), scanned_fish.end(), v[j].id) !=  scanned_fish.end())
                {
                    v.erase(v.begin() + j);
                    continue ;
                }

                // GO UP TO REPORT FISHES
                if (v[j].type == 2)
                {
                    if (v[j].scanned_by == drone[0].id)
                    {
                        cerr << "here 2" << endl;
                        drone[0].goes_up = 1;
                    }
                    else
                        drone[1].goes_up = 1;
                    // cerr << "scanned by : " << v[j].scanned_by << endl;
                }

                // ERASE REPORTED FISHES
               
            }
        }

        if (drone[0].y <= 500 && drone[0].goes_up)
        {
            cerr << "here" << endl;
            drone[0].goes_up = 0;
        }
        if (drone[1].y <= 500 && drone[1].goes_up)
        {
             drone[1].goes_up = 0;
        }

        // while (++j < v.size())
        // {
        //     if (v[j].scanned)
        //     {
        //         // if (monsters.size() >= 4)
        //         // {
        //             if (v[j].type == v[0].type && v[0].type == 2)
        //             {
        //                 if (v[j].scanned_by == drone[0].id)
        //                     drone[0].goes_up = 1;
        //                 else
        //                     drone[1].goes_up = 1;
        //             }
        //         // }
        //         // cerr << "fish : " << v[j].id << " scanned by : " << v[j].scanned_by << endl;
        //         if (v[j].scanned_by == drone[1].id)
        //             i = 1;
        //         else
        //             i = 0;
        //         if (drone[i].y <= 500 && !drone[i].emergency)
        //         {
        //             // cerr << "saved by : " << v[j].scanned_by << endl;
        //             // cerr << "fish : " << v[j].id << " erased by " << v[j].scanned_by << endl;
        //             v.erase(v.begin() + j);
        //         }
        //     }
        // }       

        
        // aya wahda nscanniha nb9a tab3ha 7ta n5rjha mn borders
        // if (scanned.size() == 11)
        //     cerr << "size : " << scanned.back() << endl;
       
        //  lamba[0] = 0;
        //  lamba[1] = 0;
        
        for (int i = 0; i < my_drone_count; i++) {
            
            // Write an action using cout. DON'T FORGET THE "<< endl"
            // // To debug: cerr << "Debug messages..." << endl;

            if (drone[i].emergency)
            {
                cout << "WAIT 0" << endl;
            }
            else
            {   
                int     op_id = -1;

                if (drone[i].init_x < 5000)
                    op_id = 1;
                else
                    op_id = 0;
                set_coords(i, drone[i], foe_drone, op_id, visible_monsters);

                // if ((drone[i].y >= 8750) || (drone[i].y >= 1500 && drone[i].battery >= 5 && turn % 3 == 0))
                //     light[i] = 1;
                // if ((drone[i].vy == drone[i].target[1] - 1250) &&  drone[i].battery >= 5)//(drone[i].y >= 1500 && drone[i].battery >= 5 && turn % 3 == 0))
                if (drone[i].lamba || (drone[i].vy >= 7532) || (drone[i].vy  >= 2832 && drone[i].battery >= 5 && turn % 4 == 0))
                {
                    cout << "MOVE " << drone[i].x << " " << drone[i].y << " 1" << endl; 
                }
                else
                {
                    cout << "MOVE " << drone[i].x << " " << drone[i].y << " 0" << endl; 
                }
 
            }

        }
    }
}
